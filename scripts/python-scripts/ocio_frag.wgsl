@binding(0) @group(0) var uTexture_0 : texture_2d<f32>;

@binding(1) @group(0) var uSampler_0 : sampler;

@binding(2) @group(0) var ocio_reach_m_table_0_0 : texture_1d<f32>;

@binding(3) @group(0) var ocio_reach_m_table_0Sampler_0 : sampler;

@binding(4) @group(0) var ocio_gamut_cusp_table_0_0 : texture_1d<f32>;

@binding(5) @group(0) var ocio_gamut_cusp_table_0Sampler_0 : sampler;

const ocio_gamut_cusp_table_0_hues_array_0 : array<f32, i32(362)> = array<f32, i32(362)>( -1.018585205078125f, 0.0f, 0.99943578243255615f, 1.9988715648651123f, 2.99830722808837891f, 3.99774312973022461f, 4.99717903137207031f, 5.99661445617675781f, 6.99605035781860352f, 7.99548625946044922f, 8.99492168426513672f, 9.99435806274414062f, 10.99379348754882812f, 11.99322891235351562f, 12.99266529083251953f, 13.99210071563720703f, 14.99153709411621094f, 15.99097251892089844f, 16.99040794372558594f, 17.98984336853027344f, 18.98928070068359375f, 19.98871612548828125f, 20.98815155029296875f, 21.98758697509765625f, 22.98702239990234375f, 23.98645782470703125f, 24.98589515686035156f, 26.25100326538085938f, 27.2489776611328125f, 28.24695205688476562f, 29.24492645263671875f, 30.24290084838867188f, 31.240875244140625f, 32.23884963989257812f, 33.23682403564453125f, 34.23479843139648438f, 35.2327728271484375f, 36.230743408203125f, 37.22872161865234375f, 38.22669219970703125f, 39.22467041015625f, 40.2226409912109375f, 41.22061538696289062f, 42.21858978271484375f, 43.21656417846679688f, 44.21453857421875f, 45.21251296997070312f, 46.21048736572265625f, 47.20846176147460938f, 48.2064361572265625f, 49.20441055297851562f, 50.20238494873046875f, 51.20035934448242188f, 52.198333740234375f, 53.1963043212890625f, 54.19428253173828125f, 55.19225311279296875f, 56.1902313232421875f, 57.188201904296875f, 58.18618011474609375f, 59.18415069580078125f, 60.18212509155273438f, 61.1800994873046875f, 62.17807388305664062f, 63.17604827880859375f, 64.1740264892578125f, 65.1719970703125f, 66.1699676513671875f, 67.16794586181640625f, 68.165924072265625f, 69.1638946533203125f, 70.161865234375f, 71.15984344482421875f, 72.1578216552734375f, 73.155792236328125f, 74.1537628173828125f, 75.15174102783203125f, 76.14971923828125f, 77.1476898193359375f, 78.145660400390625f, 79.14363861083984375f, 80.14160919189453125f, 81.13958740234375f, 82.1375579833984375f, 83.135528564453125f, 84.13350677490234375f, 85.1314849853515625f, 86.12945556640625f, 87.1274261474609375f, 88.12540435791015625f, 89.123382568359375f, 90.1213531494140625f, 91.11932373046875f, 92.1172943115234375f, 93.1152801513671875f, 94.113250732421875f, 95.1112213134765625f, 96.10919189453125f, 97.107177734375f, 98.1051483154296875f, 99.103118896484375f, 100.1010894775390625f, 101.0990753173828125f, 102.0970458984375f, 103.0950164794921875f, 104.092987060546875f, 105.090972900390625f, 106.08893585205078125f, 106.54877471923828125f, 107.571563720703125f, 108.59435272216796875f, 109.6171417236328125f, 110.63993072509765625f, 111.6627197265625f, 112.68550872802734375f, 113.7082977294921875f, 114.73108673095703125f, 115.753875732421875f, 116.77666473388671875f, 117.7994537353515625f, 118.82224273681640625f, 119.84503173828125f, 120.86782073974609375f, 121.8906097412109375f, 122.91339874267578125f, 123.936187744140625f, 124.95897674560546875f, 125.9817657470703125f, 127.00455474853515625f, 128.02734375f, 129.050140380859375f, 130.0729217529296875f, 131.095703125f, 132.118499755859375f, 133.14129638671875f, 134.1640777587890625f, 135.186859130859375f, 136.20965576171875f, 137.232452392578125f, 138.2552337646484375f, 139.27801513671875f, 140.300811767578125f, 141.2874908447265625f, 142.274169921875f, 143.2608489990234375f, 144.247528076171875f, 145.2342071533203125f, 146.22088623046875f, 147.2075653076171875f, 148.2079925537109375f, 149.2084197998046875f, 150.2088470458984375f, 151.2092742919921875f, 152.2097015380859375f, 153.2101287841796875f, 154.2105560302734375f, 155.2109832763671875f, 156.2114105224609375f, 157.21185302734375f, 158.2122802734375f, 159.21270751953125f, 160.213134765625f, 161.21356201171875f, 162.2139892578125f, 163.21441650390625f, 164.21484375f, 165.21527099609375f, 166.2156982421875f, 167.21612548828125f, 168.216552734375f, 169.21697998046875f, 170.2174072265625f, 171.21783447265625f, 172.21826171875f, 173.21868896484375f, 174.2191162109375f, 175.21954345703125f, 176.219970703125f, 177.22039794921875f, 178.2208251953125f, 179.22125244140625f, 180.2216796875f, 181.22210693359375f, 182.2225494384765625f, 183.2229766845703125f, 184.2234039306640625f, 185.2238311767578125f, 186.2242584228515625f, 187.2246856689453125f, 188.2251129150390625f, 189.2255401611328125f, 190.2259674072265625f, 191.2263946533203125f, 192.2268218994140625f, 193.12615966796875f, 194.025482177734375f, 194.9248199462890625f, 195.82415771484375f, 196.83038330078125f, 197.83660888671875f, 198.8428192138671875f, 199.8490447998046875f, 200.8552703857421875f, 201.8614959716796875f, 202.867706298828125f, 203.873931884765625f, 204.880157470703125f, 205.886383056640625f, 206.892608642578125f, 207.8988189697265625f, 208.9050445556640625f, 209.9112701416015625f, 210.9174957275390625f, 211.9237060546875f, 212.929931640625f, 213.9361572265625f, 214.9423828125f, 215.9486083984375f, 216.9548187255859375f, 217.9610443115234375f, 218.9672698974609375f, 219.9734954833984375f, 220.979705810546875f, 221.985931396484375f, 222.992156982421875f, 223.998382568359375f, 225.004608154296875f, 226.010833740234375f, 227.0170440673828125f, 228.0232696533203125f, 229.0294952392578125f, 230.03570556640625f, 231.04193115234375f, 232.04815673828125f, 233.05438232421875f, 234.06060791015625f, 235.06683349609375f, 236.0730438232421875f, 237.0792694091796875f, 238.0854949951171875f, 239.091705322265625f, 240.097930908203125f, 241.104156494140625f, 242.110382080078125f, 243.116607666015625f, 244.122833251953125f, 245.1290435791015625f, 246.1352691650390625f, 247.1414947509765625f, 248.147705078125f, 249.1539306640625f, 250.16015625f, 251.1663818359375f, 252.172607421875f, 253.1788330078125f, 254.1850433349609375f, 255.1912689208984375f, 256.197509765625f, 257.203704833984375f, 258.209930419921875f, 259.216156005859375f, 260.222381591796875f, 261.228607177734375f, 262.234832763671875f, 263.241058349609375f, 264.24725341796875f, 265.25347900390625f, 266.25970458984375f, 267.26593017578125f, 268.27215576171875f, 269.270721435546875f, 270.269287109375f, 271.267852783203125f, 272.26641845703125f, 273.264984130859375f, 274.2635498046875f, 275.262115478515625f, 276.26068115234375f, 277.24951171875f, 278.23834228515625f, 279.227203369140625f, 280.216033935546875f, 281.204864501953125f, 282.193695068359375f, 283.18255615234375f, 284.17138671875f, 285.16021728515625f, 286.1490478515625f, 287.13787841796875f, 288.126739501953125f, 289.115570068359375f, 290.104400634765625f, 291.093231201171875f, 292.08209228515625f, 293.0709228515625f, 294.05975341796875f, 295.048583984375f, 296.037445068359375f, 297.026275634765625f, 298.015106201171875f, 299.003936767578125f, 299.9927978515625f, 300.98162841796875f, 301.970458984375f, 302.95928955078125f, 303.9481201171875f, 304.936981201171875f, 305.925811767578125f, 306.914642333984375f, 307.903472900390625f, 308.892333984375f, 309.88116455078125f, 310.8699951171875f, 311.85882568359375f, 312.84765625f, 313.836517333984375f, 314.825347900390625f, 315.814178466796875f, 316.803009033203125f, 317.7918701171875f, 318.78070068359375f, 319.76953125f, 320.75836181640625f, 321.7471923828125f, 322.736053466796875f, 323.724884033203125f, 324.713714599609375f, 325.702545166015625f, 326.69140625f, 327.68023681640625f, 328.6690673828125f, 329.65789794921875f, 330.646759033203125f, 331.635589599609375f, 332.624420166015625f, 333.62896728515625f, 334.633514404296875f, 335.6380615234375f, 336.642608642578125f, 337.647186279296875f, 338.6517333984375f, 339.656280517578125f, 340.66082763671875f, 341.665374755859375f, 342.6839599609375f, 343.702545166015625f, 344.72113037109375f, 345.73974609375f, 346.758331298828125f, 347.77691650390625f, 348.795501708984375f, 349.8140869140625f, 350.83270263671875f, 351.851287841796875f, 352.869873046875f, 353.888458251953125f, 354.90704345703125f, 355.925628662109375f, 356.944244384765625f, 357.96282958984375f, 358.981414794921875f, 360.0f );
fn ocio_tonescale_fwd0_0( J_0 : f32) -> f32
{
    var A_0 : f32 = 0.03236802667379379f * pow(abs(J_0) * 0.00999999977648258f, 0.87946414947509766f);
    var Y_0 : f32 = pow(27.12999916076660156f * A_0 / (1.0f - A_0), 2.38095235824584961f);
    var f_0 : f32 = 1.04710376262664795f * pow(Y_0 / (Y_0 + 0.73009210824966431f), 1.14999997615814209f);
    var F_L_Y_0 : f32 = pow(0.79370057582855225f * max(0.0f, f_0 * f_0 / (f_0 + 0.03999999910593033f)), 0.41999998688697815f);
    return f32(sign(J_0)) * (100.0f * pow(F_L_Y_0 / (27.12999916076660156f + F_L_Y_0) * 30.89468574523925781f, 1.13705599308013916f));
}

fn ocio_reach_m_table_0_sample_0( h_0 : f32) -> f32
{
    var i_base_0 : f32 = floor(h_0);
    var i_lo_0 : f32 = i_base_0 + 1.0f;
    return mix((textureSample((ocio_reach_m_table_0_0), (ocio_reach_m_table_0Sampler_0), ((i_lo_0 + 0.5f) / 362.0f))).x, (textureSample((ocio_reach_m_table_0_0), (ocio_reach_m_table_0Sampler_0), ((i_lo_0 + 1.0f + 0.5f) / 362.0f))).x, h_0 - i_base_0);
}

fn ocio_toe_fwd0_0( x_0 : f32,  limit_0 : f32,  k1_in_0 : f32,  k2_in_0 : f32) -> f32
{
    var k2_0 : f32 = max(k2_in_0, 0.00100000004749745f);
    var k1_0 : f32 = sqrt(k1_in_0 * k1_in_0 + k2_0 * k2_0);
    var k3_0 : f32 = (limit_0 + k1_0) / (limit_0 + k2_0);
    var _S1 : f32;
    if(x_0 > limit_0)
    {
        _S1 = x_0;
    }
    else
    {
        var _S2 : f32 = k3_0 * x_0 - k1_0;
        _S1 = 0.5f * (_S2 + sqrt(_S2 * _S2 + 4.0f * k2_0 * k3_0 * x_0));
    }
    return _S1;
}

fn ocio_gamut_cusp_table_0_sample_0( h_1 : f32) -> vec3<f32>
{
    var i_0 : i32 = i32(h_1) + i32(1);
    var _S3 : i32 = i32(min(361.0f, f32(i_0 + i32(2))));
    var i_lo_1 : i32 = i32(max(0.0f, f32(i_0)));
    var i_hi_0 : i32 = _S3;
    var i_1 : i32 = i_0;
    for(;;)
    {
        if((i_lo_1 + i32(1)) < i_hi_0)
        {
        }
        else
        {
            break;
        }
        if(h_1 > (ocio_gamut_cusp_table_0_hues_array_0[i_1]))
        {
            i_lo_1 = i_1;
        }
        else
        {
            i_hi_0 = i_1;
        }
        i_1 = (i_lo_1 + i_hi_0) / i32(2);
    }
    var _S4 : i32 = i_hi_0 - i32(1);
    return mix((textureSample((ocio_gamut_cusp_table_0_0), (ocio_gamut_cusp_table_0Sampler_0), ((f32(_S4) + 0.5f) / 362.0f))).xyz, (textureSample((ocio_gamut_cusp_table_0_0), (ocio_gamut_cusp_table_0Sampler_0), ((f32(i_hi_0) + 0.5f) / 362.0f))).xyz, vec3<f32>(((h_1 - ocio_gamut_cusp_table_0_hues_array_0[_S4]) / (ocio_gamut_cusp_table_0_hues_array_0[i_hi_0] - ocio_gamut_cusp_table_0_hues_array_0[_S4]))));
}

fn ocio_get_focus_gain0_0( J_1 : f32,  cuspJ_0 : f32) -> f32
{
    var thr_0 : f32 = mix(cuspJ_0, 100.0f, 0.30000001192092896f);
    if(J_1 > thr_0)
    {
        var gain_0 : f32 = log((100.0f - thr_0) / max(0.00009999999747379f, 100.0f - J_1)) / log(10.0f);
        return gain_0 * gain_0 + 1.0f;
    }
    else
    {
        return 1.0f;
    }
}

fn ocio_solve_J_intersect0_0( J_2 : f32,  M_0 : f32,  focusJ_0 : f32,  slope_gain_0 : f32) -> f32
{
    var M_scaled_0 : f32 = M_0 / slope_gain_0;
    var a_0 : f32 = M_scaled_0 / focusJ_0;
    if(J_2 < focusJ_0)
    {
        var b_0 : f32 = 1.0f - M_scaled_0;
        var c_0 : f32 = - J_2;
        return -2.0f * c_0 / (b_0 + sqrt(b_0 * b_0 - 4.0f * a_0 * c_0));
    }
    else
    {
        var b_1 : f32 = - (1.0f + M_scaled_0 + 100.0f * a_0);
        var c_1 : f32 = 100.0f * M_scaled_0 + J_2;
        return -2.0f * c_1 / (b_1 - sqrt(b_1 * b_1 - 4.0f * a_0 * c_1));
    }
}

fn ocio_find_gamut_boundary_intersection0_0( JM_cusp_0 : vec2<f32>,  gamma_top_inv_0 : f32,  gamma_bottom_inv_0 : f32,  J_intersect_source_0 : f32,  J_intersect_cusp_0 : f32,  slope_0 : f32) -> f32
{
    var _S5 : f32 = JM_cusp_0.x;
    var _S6 : f32 = JM_cusp_0.y;
    var M_boundary_lower_0 : f32 = J_intersect_cusp_0 * pow(J_intersect_source_0 / J_intersect_cusp_0, gamma_bottom_inv_0) / (_S5 / _S6 - slope_0);
    var _S7 : f32 = 100.0f - J_intersect_cusp_0;
    var M_boundary_upper_0 : f32 = _S6 * _S7 * pow((100.0f - J_intersect_source_0) / _S7, gamma_top_inv_0) / (slope_0 * _S6 + 100.0f - _S5);
    var s_0 : f32 = 0.11999999731779099f * _S6;
    var h_2 : f32 = max(s_0 - abs(M_boundary_lower_0 - M_boundary_upper_0), 0.0f) / s_0;
    return min(M_boundary_lower_0, M_boundary_upper_0) - h_2 * h_2 * h_2 * s_0 * 0.1666666716337204f;
}

fn ocio_remap_M_fwd0_0( M_1 : f32,  gamut_boundary_M_0 : f32,  reach_boundary_M_0 : f32) -> f32
{
    var proportion_0 : f32 = max(gamut_boundary_M_0 / reach_boundary_M_0, 0.75f);
    var threshold_0 : f32 = proportion_0 * gamut_boundary_M_0;
    var _S8 : bool;
    if(proportion_0 >= 1.0f)
    {
        _S8 = true;
    }
    else
    {
        _S8 = M_1 <= threshold_0;
    }
    if(_S8)
    {
        return M_1;
    }
    var reach_offset_0 : f32 = reach_boundary_M_0 - threshold_0;
    var scale_0 : f32 = reach_offset_0 / (reach_offset_0 / (gamut_boundary_M_0 - threshold_0) - 1.0f);
    var nd_0 : f32 = (M_1 - threshold_0) / scale_0;
    return threshold_0 + scale_0 * nd_0 / (1.0f + nd_0);
}

fn ocio_gamut_compress0_0( JMh_0 : vec3<f32>,  Jx_0 : f32,  JMGcusp_0 : vec3<f32>,  reachMaxM_0 : f32) -> vec3<f32>
{
    var J_3 : f32 = JMh_0.x;
    var M_2 : f32 = JMh_0.y;
    var h_3 : f32 = JMh_0.z;
    var _S9 : bool;
    if(M_2 <= 0.0f)
    {
        _S9 = true;
    }
    else
    {
        _S9 = J_3 > 100.0f;
    }
    if(_S9)
    {
        return vec3<f32>(J_3, 0.0f, h_3);
    }
    else
    {
        var JMcusp_0 : vec2<f32> = JMGcusp_0.xy;
        var _S10 : f32 = JMcusp_0.x;
        var focusJ_1 : f32 = mix(_S10, 34.09653854370117188f, min(1.0f, 1.29999995231628418f - _S10 / 100.0f));
        var slope_gain_1 : f32 = 135.0f * ocio_get_focus_gain0_0(Jx_0, _S10);
        var J_intersect_source_1 : f32 = ocio_solve_J_intersect0_0(J_3, M_2, focusJ_1, slope_gain_1);
        var gamut_slope_0 : f32;
        if(J_intersect_source_1 < focusJ_1)
        {
            gamut_slope_0 = J_intersect_source_1;
        }
        else
        {
            gamut_slope_0 = 100.0f - J_intersect_source_1;
        }
        var gamut_slope_1 : f32 = gamut_slope_0 * (J_intersect_source_1 - focusJ_1) / (focusJ_1 * slope_gain_1);
        var gamutBoundaryM_0 : f32 = ocio_find_gamut_boundary_intersection0_0(JMcusp_0, JMGcusp_0.z, 0.87719297409057617f, J_intersect_source_1, ocio_solve_J_intersect0_0(_S10, JMcusp_0.y, focusJ_1, slope_gain_1), gamut_slope_1);
        if(gamutBoundaryM_0 <= 0.0f)
        {
            return vec3<f32>(J_3, 0.0f, h_3);
        }
        var remapped_M_0 : f32 = ocio_remap_M_fwd0_0(M_2, gamutBoundaryM_0, 100.0f * pow(J_intersect_source_1 / 100.0f, 0.87946414947509766f) / (100.0f / reachMaxM_0 - gamut_slope_1));
        return vec3<f32>(J_intersect_source_1 + remapped_M_0 * gamut_slope_1, remapped_M_0, h_3);
    }
}

fn ocio_display_view_transform_0( inPixel_0 : vec4<f32>) -> vec4<f32>
{
    var outColor_0 : vec4<f32> = inPixel_0;
    var _S11 : vec3<f32> = inPixel_0.xyz;
    var res_0 : vec4<f32> = (((mat4x4<f32>(0.6130974292755127f, 0.07019372284412384f, 0.0206155925989151f, 0.0f, 0.33952313661575317f, 0.91635388135910034f, 0.10956977307796478f, 0.0f, 0.04737945273518562f, 0.01345239859074354f, 0.86981463432312012f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f)) * (vec4<f32>(_S11.x, _S11.y, _S11.z, inPixel_0.w))));
    var _S12 : vec3<f32> = vec3<f32>(res_0.x, res_0.y, res_0.z);
    outColor_0.x = _S12.x;
    outColor_0.y = _S12.y;
    outColor_0.z = _S12.z;
    outColor_0[i32(3)] = res_0.w;
    const _S13 : vec3<f32> = vec3<f32>(0.0f, 0.0f, 0.0f);
    var _S14 : vec3<f32> = max(_S13, outColor_0.xyz);
    outColor_0.x = _S14.x;
    outColor_0.y = _S14.y;
    outColor_0.z = _S14.z;
    var _S15 : vec3<f32> = min(vec3<f32>(1024.0f, 1024.0f, 1024.0f), outColor_0.xyz);
    outColor_0.x = _S15.x;
    outColor_0.y = _S15.y;
    outColor_0.z = _S15.z;
    var res_1 : vec4<f32> = (((mat4x4<f32>(0.69545221328735352f, 0.04479456320405006f, -0.00552588235586882f, 0.0f, 0.14067870378494263f, 0.85967111587524414f, 0.00402521016076207f, 0.0f, 0.16386906802654266f, 0.0955343171954155f, 1.00150072574615479f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f)) * (vec4<f32>(outColor_0.xyz.x, outColor_0.xyz.y, outColor_0.xyz.z, outColor_0.w))));
    var _S16 : vec3<f32> = vec3<f32>(res_1.x, res_1.y, res_1.z);
    outColor_0.x = _S16.x;
    outColor_0.y = _S16.y;
    outColor_0.z = _S16.z;
    outColor_0[i32(3)] = res_1.w;
    var JMh_1 : vec3<f32>;
    var lms_0 : vec3<f32> = (((mat3x3<f32>(0.44518104195594788f, 0.12373414635658264f, 0.01170072611421347f, 0.34964928030967712f, 0.61364370584487915f, 0.02806079387664795f, -0.00112973211798817f, 0.05632280185818672f, 0.75393903255462646f)) * (outColor_0.xyz)));
    var F_L_v_0 : vec3<f32> = pow(abs(lms_0), vec3<f32>(0.41999998688697815f, 0.41999998688697815f, 0.41999998688697815f));
    var _S17 : vec3<f32> = vec3<f32>(27.12999916076660156f);
    var Aab_0 : vec3<f32> = (((mat3x3<f32>(20.25881004333496094f, 15480.0f, 1720.0f, 10.12940502166748047f, -16887.2734375f, 1720.0f, 0.50647026300430298f, 1407.272705078125f, -3440.0f)) * ((vec3<f32>(sign(lms_0)) * F_L_v_0 / (_S17 + F_L_v_0)).xyz)));
    var _S18 : f32 = Aab_0.x;
    var M_cp_0 : f32;
    var h_4 : f32;
    if(_S18 <= 0.0f)
    {
        JMh_1.x = _S13.x;
        JMh_1.y = _S13.y;
        JMh_1.z = _S13.z;
    }
    else
    {
        var J_4 : f32 = 100.0f * pow(_S18, 1.13705599308013916f);
        if(J_4 == 0.0f)
        {
            M_cp_0 = 0.0f;
        }
        else
        {
            var _S19 : f32 = Aab_0.y;
            var _S20 : f32 = Aab_0.z;
            M_cp_0 = sqrt(_S19 * _S19 + _S20 * _S20);
        }
        var _S21 : f32 = Aab_0.y;
        if(_S21 == 0.0f)
        {
            h_4 = 0.0f;
        }
        else
        {
            h_4 = atan2(Aab_0.z, _S21) * 57.29578018188476562f;
        }
        var h_5 : f32 = h_4 - floor(h_4 / 360.0f) * 360.0f;
        if(h_5 < 0.0f)
        {
            h_4 = h_5 + 360.0f;
        }
        else
        {
            h_4 = h_5;
        }
        var _S22 : vec3<f32> = vec3<f32>(J_4, M_cp_0, h_4);
        JMh_1.x = _S22.x;
        JMh_1.y = _S22.y;
        JMh_1.z = _S22.z;
    }
    var _S23 : vec3<f32> = JMh_1;
    outColor_0.x = _S23.x;
    outColor_0.y = _S23.y;
    outColor_0.z = _S23.z;
    var h_rad_0 : f32 = outColor_0.z * 0.01745329238474369f;
    var cos_hr_0 : f32 = cos(h_rad_0);
    var sin_hr_0 : f32 = sin(h_rad_0);
    var J_ts_0 : f32 = ocio_tonescale_fwd0_0(outColor_0.x);
    var reachMaxM_1 : f32 = ocio_reach_m_table_0_sample_0(outColor_0.z);
    var J_5 : f32 = outColor_0.x;
    var M_3 : f32 = outColor_0.y;
    var h_6 : f32 = outColor_0.z;
    if(M_3 != 0.0f)
    {
        var nJ_0 : f32 = J_ts_0 / 100.0f;
        var snJ_0 : f32 = max(0.0f, 1.0f - nJ_0);
        var _S24 : f32 = 2.0f * cos_hr_0;
        var Mnorm_0 : f32 = dot(vec3<f32>(cos_hr_0, _S24 * cos_hr_0 - 1.0f, 4.0f * cos_hr_0 * cos_hr_0 * cos_hr_0 - 3.0f * cos_hr_0), vec3<f32>(11.34132194519042969f, 16.4698638916015625f, 7.88421821594238281f)) + dot(vec3<f32>(sin_hr_0, _S24 * sin_hr_0, 3.0f * sin_hr_0 - 4.0f * sin_hr_0 * sin_hr_0 * sin_hr_0), vec3<f32>(14.66518783569335938f, -6.37257814407348633f, 9.19412803649902344f)) + 77.13304901123046875f;
        var limit_1 : f32 = pow(nJ_0, 0.87946414947509766f) * reachMaxM_1 / Mnorm_0;
        M_cp_0 = ocio_toe_fwd0_0(limit_1 - ocio_toe_fwd0_0(limit_1 - M_3 * pow(J_ts_0 / J_5, 0.87946414947509766f) / Mnorm_0, limit_1 - 0.00100000004749745f, snJ_0 * 1.29999995231628418f, sqrt(nJ_0 * nJ_0 + 0.00499999988824129f)), limit_1, nJ_0 * 2.40000009536743164f, snJ_0) * Mnorm_0;
    }
    else
    {
        M_cp_0 = M_3;
    }
    var _S25 : vec3<f32> = vec3<f32>(J_ts_0, M_cp_0, h_6);
    outColor_0.x = _S25.x;
    outColor_0.y = _S25.y;
    outColor_0.z = _S25.z;
    var _S26 : vec3<f32> = ocio_gamut_compress0_0(outColor_0.xyz, outColor_0.x, ocio_gamut_cusp_table_0_sample_0(outColor_0.z), reachMaxM_1);
    outColor_0.x = _S26.x;
    outColor_0.y = _S26.y;
    outColor_0.z = _S26.z;
    var _S27 : vec3<f32> = outColor_0.xyz;
    var JMh_2 : vec3<f32> = _S27;
    var Aab_1 : vec3<f32>;
    Aab_1[i32(0)] = pow(_S27.x * 0.00999999977648258f, 0.87946414947509766f);
    var _S28 : f32 = _S27.y;
    Aab_1[i32(1)] = _S28 * cos_hr_0;
    Aab_1[i32(2)] = _S28 * sin_hr_0;
    var rgb_a_0 : vec3<f32> = (((mat3x3<f32>(0.03236802667379379f, 0.03236802667379379f, 0.03236802667379379f, 0.00002076576311083f, -0.00004102504317416f, -0.00001012964094116f, 0.00001326062101725f, -0.00001201743725687f, -0.00029007607372478f)) * (Aab_1.xyz)));
    var rgb_a_lim_0 : vec3<f32> = min(abs(rgb_a_0), vec3<f32>(0.99000000953674316f, 0.99000000953674316f, 0.99000000953674316f));
    var _S29 : vec3<f32> = (((mat3x3<f32>(7.4504857063293457f, -1.47506749629974365f, 0.01062885019928217f, -6.13018369674682617f, 3.11835741996765137f, -0.31857267022132874f, -0.06038085371255875f, -0.38336902856826782f, 1.56786489486694336f)) * (vec3<f32>(sign(rgb_a_0)) * pow(_S17 * rgb_a_lim_0 / (vec3<f32>(1.0f) - rgb_a_lim_0), vec3<f32>(2.38095235824584961f, 2.38095235824584961f, 2.38095235824584961f)))));
    JMh_2.x = _S29.x;
    JMh_2.y = _S29.y;
    JMh_2.z = _S29.z;
    var _S30 : vec3<f32> = JMh_2;
    outColor_0.x = _S30.x;
    outColor_0.y = _S30.y;
    outColor_0.z = _S30.z;
    var _S31 : vec3<f32> = max(_S13, outColor_0.xyz);
    outColor_0.x = _S31.x;
    outColor_0.y = _S31.y;
    outColor_0.z = _S31.z;
    var _S32 : vec3<f32> = min(vec3<f32>(1.0f, 1.0f, 1.0f), outColor_0.xyz);
    outColor_0.x = _S32.x;
    outColor_0.y = _S32.y;
    outColor_0.z = _S32.z;
    const slope_1 : vec4<f32> = vec4<f32>(12.92321014404296875f, 12.92321014404296875f, 12.92321014404296875f, 1.0f);
    const scale_1 : vec4<f32> = vec4<f32>(1.0549999475479126f, 1.0549999475479126f, 1.0549999475479126f, 1.00000095367431641f);
    const offset_0 : vec4<f32> = vec4<f32>(0.05499999970197678f, 0.05499999970197678f, 0.05499999970197678f, 9.99999997475242708e-07f);
    const gamma_0 : vec4<f32> = vec4<f32>(0.4166666567325592f, 0.4166666567325592f, 0.4166666567325592f, 0.99999898672103882f);
    if((outColor_0[i32(0)]) > 0.00303993467241526f)
    {
        M_cp_0 = 1.0f;
    }
    else
    {
        M_cp_0 = 0.0f;
    }
    if((outColor_0[i32(1)]) > 0.00303993467241526f)
    {
        h_4 = 1.0f;
    }
    else
    {
        h_4 = 0.0f;
    }
    var _S33 : f32;
    if((outColor_0[i32(2)]) > 0.00303993467241526f)
    {
        _S33 = 1.0f;
    }
    else
    {
        _S33 = 0.0f;
    }
    var _S34 : f32;
    if((outColor_0[i32(3)]) > 1.0f)
    {
        _S34 = 1.0f;
    }
    else
    {
        _S34 = 0.0f;
    }
    var isAboveBreak_0 : vec4<f32> = vec4<f32>(M_cp_0, h_4, _S33, _S34);
    var res_2 : vec4<f32> = isAboveBreak_0 * (pow(max(vec4<f32>(0.0f, 0.0f, 0.0f, 0.0f), outColor_0), gamma_0) * scale_1 - offset_0) + (vec4<f32>(1.0f, 1.0f, 1.0f, 1.0f) - isAboveBreak_0) * (outColor_0 * slope_1);
    var _S35 : vec3<f32> = vec3<f32>(res_2.x, res_2.y, res_2.z);
    outColor_0.x = _S35.x;
    outColor_0.y = _S35.y;
    outColor_0.z = _S35.z;
    outColor_0[i32(3)] = res_2.w;
    return outColor_0;
}

struct pixelOutput_0
{
    @location(0) output_0 : vec4<f32>,
};

struct pixelInput_0
{
    @location(0) Tex_0 : vec2<f32>,
};

@fragment
fn main( _S36 : pixelInput_0, @builtin(position) Pos_0 : vec4<f32>) -> pixelOutput_0
{
    var _S37 : pixelOutput_0 = pixelOutput_0( ocio_display_view_transform_0((textureSample((uTexture_0), (uSampler_0), (_S36.Tex_0)))) );
    return _S37;
}

